<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Canoe</title>
  
  <subtitle>「ろくでなし」</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://www.orekiyuta.cn/"/>
  <updated>2021-10-01T19:22:14.074Z</updated>
  <id>http://www.orekiyuta.cn/</id>
  
  <author>
    <name>Orekiyuta</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Disable Windows Update</title>
    <link href="http://www.orekiyuta.cn/archives/disableWindowsUpdate/"/>
    <id>http://www.orekiyuta.cn/archives/disableWindowsUpdate/</id>
    <published>2021-10-01T18:37:02.000Z</published>
    <updated>2021-10-01T19:22:14.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><ul><li>Disable Windows Update<a id="more"></a></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>win + r , input “services.msc”</li><li><img src="/images/disableWindowsUpdate/Snipaste_2021-10-02_02-39-27.png" alt></li><li>win + r , input “regedit”</li><li>make item “WindowsUpdate”</li><li><img src="/images/disableWindowsUpdate/Snipaste_2021-10-02_02-42-00.png" alt></li><li>make item “AU”</li><li><img src="/images/disableWindowsUpdate/Snipaste_2021-10-02_02-44-11.png" alt></li><li>make DWORD “AUOptions”</li><li><img src="/images/disableWindowsUpdate/Snipaste_2021-10-02_02-45-30.png" alt></li><li>value “2”</li><li><img src="/images/disableWindowsUpdate/Snipaste_2021-10-02_02-47-01.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scene&quot;&gt;&lt;a href=&quot;#Scene&quot; class=&quot;headerlink&quot; title=&quot;Scene&quot;&gt;&lt;/a&gt;Scene&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Disable Windows Update
    
    </summary>
    
    
    
      <category term="Windows" scheme="http://www.orekiyuta.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Disable Windows Defender</title>
    <link href="http://www.orekiyuta.cn/archives/disableWindowsDefender/"/>
    <id>http://www.orekiyuta.cn/archives/disableWindowsDefender/</id>
    <published>2021-10-01T18:13:31.000Z</published>
    <updated>2021-10-01T18:47:28.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><ul><li>Disable Windows Defender<a id="more"></a></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>win + r</li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-17-40.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-19-42.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-20-19.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-20-51.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-21-23.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-21-55.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-22-23.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-22-23.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-23-21.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-23-45.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-24-57.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-25-38.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-26-15.png" alt></li><li><img src="/images/disableWindowsDefender/Snipaste_2021-10-02_02-27-14.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scene&quot;&gt;&lt;a href=&quot;#Scene&quot; class=&quot;headerlink&quot; title=&quot;Scene&quot;&gt;&lt;/a&gt;Scene&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Disable Windows Defender
    
    </summary>
    
    
    
      <category term="Windows" scheme="http://www.orekiyuta.cn/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Local Area Network(LAN) Formation Scheme</title>
    <link href="http://www.orekiyuta.cn/archives/localAreaNetworkFormationScheme/"/>
    <id>http://www.orekiyuta.cn/archives/localAreaNetworkFormationScheme/</id>
    <published>2021-09-19T18:55:37.000Z</published>
    <updated>2021-09-21T12:35:18.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><ul><li>组一套家庭网络服务，充分利用全部闲置的计算设备。</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Scene&quot;&gt;&lt;a href=&quot;#Scene&quot; class=&quot;headerlink&quot; title=&quot;Scene&quot;&gt;&lt;/a&gt;Scene&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;组一套家庭网络服务，充分利用全部闲置的计算设备。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Solution
      
    
    </summary>
    
    
    
      <category term="Network" scheme="http://www.orekiyuta.cn/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Github Unsupport PassWord Authentication</title>
    <link href="http://www.orekiyuta.cn/archives/githubUnsupportPassWordAuthentication/"/>
    <id>http://www.orekiyuta.cn/archives/githubUnsupportPassWordAuthentication/</id>
    <published>2021-08-20T16:23:55.000Z</published>
    <updated>2021-08-20T16:53:28.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sence"><a href="#Sence" class="headerlink" title="Sence"></a>Sence</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class="line">fatal: unable to access 'https://github.com/xxx/xxx.github.io.git/': The requested URL returned error: 403</span><br><span class="line">[41mFATAL[49m Something's wrong. Maybe you can find the solution here: [4mhttp://hexo.io/docs/troubleshooting.html[24m</span><br></pre></td></tr></table></figure></div><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li><p>Hexo =&gt; _config.yaml</p>  <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line">    <span class="comment"># repo: https://github.com/OrekiYuta/OrekiYuta.github.io.git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">git@github.com:OrekiYuta/orekiyuta.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div></li><li><p>👉 <a href="https://www.orekiyuta.cn/archives/Hexo-Install-Migrate/">Github SSH</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Sence&quot;&gt;&lt;a href=&quot;#Sence&quot; class=&quot;headerlink&quot; title=&quot;Sence&quot;&gt;&lt;/a&gt;Sence&lt;/h2&gt;&lt;div class=&quot;highlight-wrap&quot;autocomplete=&quot;off&quot; autocorrect=&quot;of
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="http://www.orekiyuta.cn/tags/Hexo/"/>
    
      <category term="Github" scheme="http://www.orekiyuta.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Use Github Api Commit</title>
    <link href="http://www.orekiyuta.cn/archives/useGithubApiCommit/"/>
    <id>http://www.orekiyuta.cn/archives/useGithubApiCommit/</id>
    <published>2021-08-03T16:53:33.000Z</published>
    <updated>2021-08-19T20:21:18.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sence"><a href="#Sence" class="headerlink" title="Sence"></a>Sence</h2><ul><li>使用 github 提供的 API 操作 repo</li><li>之后可利用该操作,对仓库项目提交,结合 github action 进行自动化部署<a id="more"></a></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Read-Input"><a href="#Read-Input" class="headerlink" title="Read / Input"></a>Read / Input</h3><ul><li>查阅官方文档可见,接口说明 👉 <a href="https://docs.github.com/en/rest/reference/repos#create-or-update-file-contents" target="_blank" rel="noopener">Create or update file contents</a><ul><li><img src="/images/useGithubApiCommit/Snipaste_2021-08-05_21-15-21.png" alt>  </li></ul></li><li>鉴权说明 👉 <a href="https://docs.github.com/en/rest/guides/getting-started-with-the-rest-api#authentication" target="_blank" rel="noopener">Authentication</a></li></ul><h3 id="Do-Output"><a href="#Do-Output" class="headerlink" title="Do / Output"></a>Do / Output</h3><ul><li><p>申请 token   👉 <a href="https://github.com/settings/apps" target="_blank" rel="noopener">Settings/Developer settings/Personal access tokens</a> </p><ul><li>填写必要参数, 勾选需要的权限后, 点击 Generate token</li><li><img src="/images/useGithubApiCommit/Snipaste_2021-08-05_21-32-31.png" alt></li><li>这里需要注意保存一下 token 值, 只会显示一次 , 如果忘了再创建一个即可</li><li><img src="/images/useGithubApiCommit/Snipaste_2021-08-05_21-31-17.png" alt></li><li>github 会扫描 github 所有用户的 repo , 如果某个文件包含了 “token 值”,都会在此文件中清除掉 , 并在该 token 的持有者配置中 delete 掉该配置 , 就是上图选项 “Personal access tokens” 里</li></ul></li><li><p>利用 Flask 实现一下</p></li><li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PY"><figure class="iseeu highlight /py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github_pic_api.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> app.api <span class="keyword">import</span> pic</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> app.service <span class="keyword">import</span> github_commit_service</span><br><span class="line"></span><br><span class="line">CORS(pic, supports_credentials=<span class="literal">True</span>) <span class="comment"># 允许跨域请求</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@pic.route("/", methods=["POST"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_pic_to_github</span><span class="params">()</span>:</span></span><br><span class="line">    f = request.files.get(<span class="string">'file'</span>) <span class="comment"># 获取前端传输过来的文件对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置仓库参数</span></span><br><span class="line">    github_repo_config = &#123;</span><br><span class="line">        <span class="string">"token"</span>: <span class="string">"x"</span>, <span class="comment"># 申请得到的 token</span></span><br><span class="line">        <span class="string">"repo"</span>: <span class="string">"asscet"</span>, <span class="comment"># 公开的仓库名</span></span><br><span class="line">        <span class="string">"owner"</span>: <span class="string">"cat"</span>,  <span class="comment"># 仓库的拥有者</span></span><br><span class="line">        <span class="string">"email"</span>: <span class="string">"cat@gmail.com"</span>, <span class="comment"># 仓库拥有者的邮箱</span></span><br><span class="line">        <span class="string">"base_url"</span>: <span class="string">"https://api.github.com/repos/"</span>, <span class="comment"># github 基础接口地址</span></span><br><span class="line">        <span class="string">"repo_path"</span>: <span class="string">"ccc/"</span>, <span class="comment"># 公开的仓库里的目录位置</span></span><br><span class="line">        <span class="string">"file"</span>: f  <span class="comment"># 要操作的文件对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置本次提交的参数</span></span><br><span class="line">    commit_data = &#123;</span><br><span class="line">        <span class="string">"message"</span>: <span class="string">"use github api commit at "</span>, <span class="comment"># 提交 message</span></span><br><span class="line">        <span class="string">"committer"</span>: &#123;</span><br><span class="line">            <span class="string">"name"</span>: github_repo_config.get(<span class="string">"owner"</span>), <span class="comment"># 提交者名称</span></span><br><span class="line">            <span class="string">"email"</span>: github_repo_config.get(<span class="string">"email"</span>) <span class="comment"># 提交者邮箱</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"content"</span>: base64.b64encode(f.read()).decode(<span class="string">'utf-8'</span>), <span class="comment"># 需要把文件对象 base64 加密再转成 String</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置请求头参数,用于鉴权</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Authorization"</span>: <span class="string">'token '</span> + github_repo_config.get(<span class="string">"token"</span>),</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"application/vnd.github.v3+json"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = github_commit_service.commit_file(github_repo_config, commit_data, headers)</span><br><span class="line">    <span class="keyword">return</span> jsonify(result)</span><br></pre></td></tr></table></figure></div></li><li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PY"><figure class="iseeu highlight /py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># github_commit_service.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">commit_file</span><span class="params">(grc, commit_data, headers)</span>:</span></span><br><span class="line">    repo_url = grc.get(<span class="string">"base_url"</span>) \</span><br><span class="line">            + grc.get(<span class="string">"owner"</span>) + <span class="string">"/"</span> \</span><br><span class="line">            + grc.get(<span class="string">"repo"</span>) + <span class="string">"/contents/"</span> \</span><br><span class="line">            + grc.get(<span class="string">"repo_path"</span>) \</span><br><span class="line">            + grc.get(<span class="string">"file"</span>).filename</span><br><span class="line"></span><br><span class="line">    fin_result = &#123;</span><br><span class="line">        <span class="string">"req"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="string">"res"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.put(repo_url, data=json.dumps(commit_data), headers=headers)</span><br><span class="line">        fin_result[<span class="string">"res"</span>] = bytes.decode(res.content)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        fin_result[<span class="string">"req"</span>] = <span class="string">"commit fail! unknown exception!"</span></span><br><span class="line">        <span class="keyword">return</span> fin_result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># print(result.get("req"))  .get 如果 key 不存在 'req' 不会报错</span></span><br><span class="line">        <span class="comment"># print(result["req"])      [] 如果 key 不存在 'req' 会报错</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res.status_code == <span class="number">201</span>:</span><br><span class="line">            fin_result[<span class="string">"req"</span>] = <span class="string">"commit success! great!"</span></span><br><span class="line">            <span class="keyword">return</span> fin_result</span><br><span class="line">        <span class="keyword">elif</span> res.status_code == <span class="number">422</span>:</span><br><span class="line">            <span class="comment"># 422 状态码,可能该文件名已经存在仓库中</span></span><br><span class="line">            fin_result.get(<span class="string">"req"</span>, <span class="string">"commit fail! content maybe exists!?"</span>)</span><br><span class="line">            <span class="keyword">return</span> fin_result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            fin_result[<span class="string">"req"</span>] = <span class="string">"commit fail! check the res message."</span></span><br><span class="line">            <span class="keyword">return</span> fin_result</span><br></pre></td></tr></table></figure></div></li><li><p><img src="/images/useGithubApiCommit/Snipaste_2021-08-05_22-08-34.png" alt></p></li></ul><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ul><li>👉 <a href="https://docs.github.com/en/rest/reference/repos#create-or-update-file-contents" target="_blank" rel="noopener">Create or update file contents</a></li><li>👉 <a href="https://segmentfault.com/a/1190000015144126" target="_blank" rel="noopener">一篇文章搞定Github API 调用 (v3)</a></li><li>👉 <a href="https://wqian.net/blog/2019/0426-python-github-api-index.html" target="_blank" rel="noopener">python利用github的api实现文件的上传和更新</a></li><li>👉 <a href="https://www.bbsmax.com/A/Vx5MDry7JN/" target="_blank" rel="noopener">使用GitHub API上传文件及GitHub做图床</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sence&quot;&gt;&lt;a href=&quot;#Sence&quot; class=&quot;headerlink&quot; title=&quot;Sence&quot;&gt;&lt;/a&gt;Sence&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 github 提供的 API 操作 repo&lt;/li&gt;
&lt;li&gt;之后可利用该操作,对仓库项目提交,结合 github action 进行自动化部署
    
    </summary>
    
    
    
      <category term="Python" scheme="http://www.orekiyuta.cn/tags/Python/"/>
    
      <category term="Flask" scheme="http://www.orekiyuta.cn/tags/Flask/"/>
    
      <category term="Github" scheme="http://www.orekiyuta.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Gitkraken Account Switch</title>
    <link href="http://www.orekiyuta.cn/archives/gitkrakenAccountSwitch/"/>
    <id>http://www.orekiyuta.cn/archives/gitkrakenAccountSwitch/</id>
    <published>2021-07-28T13:43:24.000Z</published>
    <updated>2021-08-19T20:21:17.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sence"><a href="#Sence" class="headerlink" title="Sence"></a>Sence</h2><ul><li>使用 Gitkraken GUI 工具,想要切换绑定的 github 账号拉取代码 </li><li>出现错误提示,无法断开当前 github 账户绑定</li><li><img src="/images/gitkrakenAccountSwitch/Snipaste_2021-07-28_21-50-19.png" alt></li></ul><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>经过一顿排查,查阅官网文档终于找到答案 </li><li><p>👉<a href="https://support.gitkraken.com/faq/" target="_blank" rel="noopener">How can I use multiple GitHub / GitLab / Bitbucket / Azure DevOps accounts with GitKraken?</a></p></li><li><p><img src="/images/gitkrakenAccountSwitch/Snipaste_2021-07-28_21-54-00.png" alt></p></li><li><p>定位到是 Gitkraken 软件版本的问题,即 Pro 版本才能自由切换账户绑定</p></li><li>可知 Gitkraken 在 6.5.1 之前是完全开源免费的,安装 6.5.1 版本即可<ul><li>在安装之前修改下 hosts 文件</li><li>添加<code>0.0.0.0 release.gitkraken.com</code> 防止被动更新最新版本</li></ul></li><li>更换版本后即可自由切换 github 账户绑定</li><li><img src="/images/gitkrakenAccountSwitch/Snipaste_2021-07-28_21-56-01.png" alt></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sence&quot;&gt;&lt;a href=&quot;#Sence&quot; class=&quot;headerlink&quot; title=&quot;Sence&quot;&gt;&lt;/a&gt;Sence&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 Gitkraken GUI 工具,想要切换绑定的 github 账号拉取代码 &lt;/li&gt;
&lt;li&gt;出现错误提示,无法断开当前 github 账户绑定&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/images/gitkrakenAccountSwitch/Snipaste_2021-07-28_21-50-19.png&quot; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://www.orekiyuta.cn/tags/Git/"/>
    
      <category term="Github" scheme="http://www.orekiyuta.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Get AZ-900 Certification</title>
    <link href="http://www.orekiyuta.cn/archives/getAZ-900Certification/"/>
    <id>http://www.orekiyuta.cn/archives/getAZ-900Certification/</id>
    <published>2021-07-24T09:39:00.000Z</published>
    <updated>2021-08-19T20:21:17.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a>Prepare</h2><ul><li>👉 <a href="https://docs.microsoft.com/en-us/learn/certifications/exams/az-900?wt.mc_id=learningredirect_certs-web-wwl" target="_blank" rel="noopener">Exam AZ-900: Microsoft Azure Fundamentals</a></li><li>Schedule exam </li><li>Review examination on the site Or outside materials <ul><li>👉<a href="https://raw.githubusercontent.com/OrekiYuta/Gear/master/Materials/AZ-900.rar" target="_blank" rel="noopener">AZ-900</a></li><li>👉<a href="https://github.com/OrekiYuta/Gear/blob/master/Materials/AZ-900.rar" target="_blank" rel="noopener">AZ-900.bakLink</a></li></ul></li></ul><h2 id="If-Pass"><a href="#If-Pass" class="headerlink" title="If Pass"></a>If Pass</h2><ul><li>Receive Mail<ul><li><img src="/images/getAZ-900Certification/Snipaste_2021-07-24_17-55-39.png" alt></li></ul></li><li>Get the Certification<ul><li><img src="/images/getAZ-900Certification/Snipaste_2021-07-24_17-58-48.png" alt></li></ul></li><li>Check on <ul><li>Profile =&gt; Certifications 👉 <a href="https://docs.microsoft.com/en-us/" target="_blank" rel="noopener">docs.microsoft.com</a></li><li>👉 <a href="https://www.credly.com/earner/earned" target="_blank" rel="noopener">credly</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Prepare&quot;&gt;&lt;a href=&quot;#Prepare&quot; class=&quot;headerlink&quot; title=&quot;Prepare&quot;&gt;&lt;/a&gt;Prepare&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;👉 &lt;a href=&quot;https://docs.microsoft.com/en-us
      
    
    </summary>
    
    
    
      <category term="Microsoft" scheme="http://www.orekiyuta.cn/tags/Microsoft/"/>
    
      <category term="Certificate" scheme="http://www.orekiyuta.cn/tags/Certificate/"/>
    
  </entry>
  
  <entry>
    <title>jQuery Loop Clone</title>
    <link href="http://www.orekiyuta.cn/archives/jQueryLoopClone/"/>
    <id>http://www.orekiyuta.cn/archives/jQueryLoopClone/</id>
    <published>2021-07-20T12:45:04.000Z</published>
    <updated>2021-08-19T20:21:18.001Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><ul><li>循环 clone() 发现除了第一个元素以后的都不对劲</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>使用 clone() 的时候要注意的是 clone 出来的元素标签需要放在 原型标签的后面</li></ul><a id="more"></a><ul><li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>clone<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> num = <span class="number">1</span>;num&lt;<span class="number">10</span>;num++)&#123;</span></span><br><span class="line"><span class="undefined">            /**</span></span><br><span class="line"><span class="undefined">             * 取首个 id 为 template 的元素 </span></span><br><span class="line"><span class="undefined">             * 如果 DOM 创建的节点插入在👆该元素的前面, 就会取到刚生成的节点</span></span><br><span class="line"><span class="undefined">             */</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> template = $(<span class="string">"#template"</span>).clone(); </span></span><br><span class="line"><span class="actionscript">            template.append(<span class="string">"&lt;button &gt;"</span>+num+<span class="string">"&lt;/button&gt;"</span>);</span></span><br><span class="line"><span class="undefined">            template.show();</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#cloneDiv"</span>).append(template);</span></span><br><span class="line"><span class="undefined">        &#125;   </span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"template"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"cloneDiv"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>否则就会将第一次 clone 出来的元素标签作为原型，进行后续 clone() ,如下：</p></li><li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>clone<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span>(<span class="keyword">var</span> num = <span class="number">1</span>;num&lt;<span class="number">10</span>;num++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> template = $(<span class="string">"#template"</span>).clone();</span></span><br><span class="line"><span class="actionscript">        template.append(<span class="string">"&lt;button &gt;"</span>+num+<span class="string">"&lt;/button&gt;"</span>);</span></span><br><span class="line"><span class="undefined">        template.show();</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#voteListDiv"</span>).append(template);</span></span><br><span class="line"><span class="undefined">    &#125;   </span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"voteListDiv"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">"template"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scene&quot;&gt;&lt;a href=&quot;#Scene&quot; class=&quot;headerlink&quot; title=&quot;Scene&quot;&gt;&lt;/a&gt;Scene&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;循环 clone() 发现除了第一个元素以后的都不对劲&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 clone() 的时候要注意的是 clone 出来的元素标签需要放在 原型标签的后面&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="jQuery" scheme="http://www.orekiyuta.cn/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Use jsdeliver Load Static Resources</title>
    <link href="http://www.orekiyuta.cn/archives/usejsdeliverLoadStaticResources/"/>
    <id>http://www.orekiyuta.cn/archives/usejsdeliverLoadStaticResources/</id>
    <published>2021-07-15T12:38:55.000Z</published>
    <updated>2021-08-19T20:21:18.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><ul><li>向 github 的 README 文件中添加图片链接</li><li>把图片上传到仓库,然后引用仓库的自动分配给图片的 <code>raw.githubusercontent.com</code> 域地址</li><li>但是这种方式只有能访问 <code>raw.githubusercontent.com</code> 的情况下才能加载图片</li><li>由于网络情况原因, DNS 污染 ,很多时候加载不出来</li><li>因此这种方式不够完善<a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2></li><li>解决这个问题的话，有两种方式<ul><li>利用 github 的仓库建个静态的图库站点,再取该站点的链接; 但这种方式取决于 github 的访问稳定情况</li><li>利用 CDN 内容分发服务, 这种方式能够完善的解决问题</li></ul></li><li>下面主要介绍利用 jsdelivr 和 github 仓库的 Releases 来部署静态资源</li></ul><ol><li>先把静态资源上传到仓库,然后创建 Releases<ul><li><img src="/images/usejsdeliverLoadStaticResources/Snipaste_2021-07-15_21-11-34.png" alt></li></ul></li><li>填写基本版本信息<ul><li><img src="/images/usejsdeliverLoadStaticResources/Snipaste_2021-07-15_21-12-32.png" alt></li></ul></li><li>然后 Publish release 即可</li><li>最后利用 jsdeliver 提供的服务即可<ul><li><code>https://cdn.jsdelivr.net/gh/[github用户名]/[仓库名][可选版本号]/[资源在仓库的路径]</code></li><li>如: <a href="https://cdn.jsdelivr.net/gh/OrekiYuta/OrekiYuta@1.0.0/OrekiYuta.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/OrekiYuta/OrekiYuta@1.0.0/OrekiYuta.png</a> </li><li>或, <a href="https://cdn.jsdelivr.net/gh/OrekiYuta/OrekiYuta@latest/OrekiYuta.png" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/OrekiYuta/OrekiYuta@latest/OrekiYuta.png</a></li><li><img src="https://cdn.jsdelivr.net/gh/OrekiYuta/OrekiYuta@1.0.0/OrekiYuta.png" alt="OrekiYuta"></li></ul></li></ol><ul><li>利用这种思想,还可以部署一些静态的服务<h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2></li><li>👉 <a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsdelivr</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scene&quot;&gt;&lt;a href=&quot;#Scene&quot; class=&quot;headerlink&quot; title=&quot;Scene&quot;&gt;&lt;/a&gt;Scene&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;向 github 的 README 文件中添加图片链接&lt;/li&gt;
&lt;li&gt;把图片上传到仓库,然后引用仓库的自动分配给图片的 &lt;code&gt;raw.githubusercontent.com&lt;/code&gt; 域地址&lt;/li&gt;
&lt;li&gt;但是这种方式只有能访问 &lt;code&gt;raw.githubusercontent.com&lt;/code&gt; 的情况下才能加载图片&lt;/li&gt;
&lt;li&gt;由于网络情况原因, DNS 污染 ,很多时候加载不出来&lt;/li&gt;
&lt;li&gt;因此这种方式不够完善
    
    </summary>
    
    
    
      <category term="Github" scheme="http://www.orekiyuta.cn/tags/Github/"/>
    
      <category term="CDN" scheme="http://www.orekiyuta.cn/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>Git Remote end hung up unexpectedly</title>
    <link href="http://www.orekiyuta.cn/archives/gitRemoteEndHungUpUnexpectedly/"/>
    <id>http://www.orekiyuta.cn/archives/gitRemoteEndHungUpUnexpectedly/</id>
    <published>2021-07-13T11:43:07.000Z</published>
    <updated>2021-08-19T20:21:17.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scene"><a href="#Scene" class="headerlink" title="Scene"></a>Scene</h2><ul><li>查看 github 发现今日没有自动提交</li><li>手动 push 一下，发现异常情况,应该也是网络问题</li><li><img src="/images/gitRemoteEndHungUpUnexpectedly/Snipaste_2021-07-13_19-50-16.png" alt></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><ul><li>把远程连接 https 改用 ssh</li><li><code>git remote set-url origin git@github.com:OrekiYuta/Temp.git</code></li><li><p><img src="/images/gitRemoteEndHungUpUnexpectedly/Snipaste_2021-07-13_19-51-27.png" alt></p><a id="more"></a></li><li><p>还是不行的话,再执行<code>git config --global http.postBuffer 524288000</code></p></li></ul><h3 id="针对-hexo"><a href="#针对-hexo" class="headerlink" title="针对 hexo"></a>针对 hexo</h3><ul><li>到 <code>C:\Users\[username]\.ssh</code>  目录下,新建 config 无后缀文件，写入以下内容</li><li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User 你GitHub的邮箱</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure></div></li><li><p><code>ssh -T git@github.com</code>命令测试能否连接</p></li><li>如果能连接通的话</li><li>到 hexo 根目录配置文件 _config.yml ,修改连接方式</li><li><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: https://github.com/yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><ul><li>👉 <a href="https://stackoverflow.com/questions/15240815/git-fatal-the-remote-end-hung-up-unexpectedly" target="_blank" rel="noopener">Git, fatal: The remote end hung up unexpectedly</a></li><li>👉 <a href="https://stackoverflow.com/questions/11200237/how-do-i-get-git-to-default-to-ssh-and-not-https-for-new-repositories" target="_blank" rel="noopener">How do I get git to default to ssh and not https for new repositories</a></li><li>👉 <a href="https://gist.github.com/daofresh/0a95772d582cafb202142ff7871da2fcs" target="_blank" rel="noopener">Fix error : RPC failed; curl 92 HTTP/2 stream 0 was not closed cleanly: PROTOCOL_ERROR (err 1)</a></li><li>👉 <a href="https://stackoverflow.com/questions/38618885/error-rpc-failed-curl-transfer-closed-with-outstanding-read-data-remaining" target="_blank" rel="noopener">error: RPC failed; curl transfer closed with outstanding read data remaining</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scene&quot;&gt;&lt;a href=&quot;#Scene&quot; class=&quot;headerlink&quot; title=&quot;Scene&quot;&gt;&lt;/a&gt;Scene&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;查看 github 发现今日没有自动提交&lt;/li&gt;
&lt;li&gt;手动 push 一下，发现异常情况,应该也是网络问题&lt;/li&gt;
&lt;li&gt;&lt;img src=&quot;/images/gitRemoteEndHungUpUnexpectedly/Snipaste_2021-07-13_19-50-16.png&quot; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;headerlink&quot; title=&quot;Solution&quot;&gt;&lt;/a&gt;Solution&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;把远程连接 https 改用 ssh&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote set-url origin git@github.com:OrekiYuta/Temp.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img src=&quot;/images/gitRemoteEndHungUpUnexpectedly/Snipaste_2021-07-13_19-51-27.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Git" scheme="http://www.orekiyuta.cn/tags/Git/"/>
    
      <category term="Hexo" scheme="http://www.orekiyuta.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
